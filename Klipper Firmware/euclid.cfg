## The following is EXAMPLE configuration; it is intended to guide you in the
## configuration of the Euclid probe for YOUR printer.
##
## When incorporating this config into your own, make sure you address all
## comment markers starting with "@TODO".  Failure to do so could result in
## damage to your probe, your printer, or your pride.
##
##
## This example is for a fixed dock, fixed gantry/carriage and moving bed motion
## system like RailCore, Ender5, V-Core3, etc. Delta printes will be similar.
## Moving gantry printers like Voron need a few tweaks to ensure proper
## clearances and leveling procedures; some hints are provided inline below.
##
## Array variables implementation and macro setups credited to Brian Lalor,
## yolo-dubstep#8033 on Discord. See https://github.com/blalor/vcore3-ratos-config
## for updates and details.
##

## @TODO the following is a hardware probe config for the hardware configuration.
## it can appear in either the printer.cfg OR in the euclid.cfg, not both.
## see https://euclidprobe.github.io/05_klipper.html for more details.
##
##
#####################################################################
#	Euclid Probe
#####################################################################

[servo euclid_servo]
pin: PE5
#   PWM output pin controlling the servo. This parameter must be
#   provided.
maximum_servo_angle: 180
#   The maximum angle (in degrees) that this servo can be set to. The
#   default is 180 degrees.
minimum_pulse_width: 0.0005
#   The minimum pulse width time (in seconds). This should correspond
#   with an angle of 0 degrees. The default is 0.001 seconds.
maximum_pulse_width: 0.0025
#   The maximum pulse width time (in seconds). This should correspond
#   with an angle of maximum_servo_angle. The default is 0.002
#   seconds.
initial_angle: 180
#   Initial angle (in degrees) to set the servo to. The default is to
#   not send any signal at startup.
#initial_pulse_width: 0.0005
#   Initial pulse width time (in seconds) to set the servo to. (This
#   is only valid if initial_angle is not set.) The default is to not
#   send any signal at startup.

#Home all
#Z40
#Y0
#X
#X224
#SET_SERVO SERVO=euclid_servo ANGLE=13
#Z11.8
#X-100


#SET_SERVO SERVO=euclid_servo ANGLE=103


# This cfg contains all the necessary definitions, macros and settings to use the Euclid Probe and the Bedmount attached to the
# left side of the left bed extrusion.
#
#
# What it does? 
# It is using the Z-Endstop only to locate the Probedock, the real Z 0-Point is measured afterwards using the Euclid.
#
# The calculation of the Z 0 Point is done by 5 Measurements in the middle of the bed to get a better idea of the "real" height. 
# The result of this is an average out of the 5 Z heights, each of the 5 Points is calculated by using the median out of the samples.
#
#               +++ Point location on the Bed +++
#               ---------------------------------
#               |                               |
#               |                               |
#               |          Boundingbox          |
#               |           ---------           |
#               |           | *4 *3 |           |
#               |           |  *5   |           |
#               |           | *1 *2 |           |
#               |           ---------           |
#               |                               |
#               |                               |
#               |                               |
#               ---------------------------------
#
# ProbeBoundingBox sets the square boundry of the sampling area. A setting of 30 would yeild X=30mm & Y=30mm.
# 10% of the bed size is a good start. Please change the ProbeBoundingBox value in the Z Compensation settings below.
#
#   Setting: To determine a starting euclidZCompensation value, take the following steps. Check nozzle clean and
#   free of debris, same for bed. Set euclidZCompensation to 0 to disable G3201 from applying changes, and restart
#   Klipper. Dial-in your Z height as outlined in the procedures found here: https://docs.vorondesign.com/build/startup/.
#   Once you are satisfied with your Z height, run G3201 from the console. Once completed, review the console output
#   for 'Current Average is:' and place that value as euclidZCompensation. Following a save and restart, perform a
#   first-layer print test, babystep Z until happy, and apply the babystep total to the euclidZCompensation value.
#   Increasing this value will set the nozzle closer to the bed, and vice versa. For example, if you were using a
#   value of 9.4 and wanted a little more 'squish', try 9.44.
#
# ! Note: A safety feature exists that checks the distance between the Z-endstop trigger to the newly calculated
#   0-Point; if this difference is greater than the defined ZprobeAbortTolerance, the compensation will not be applied.
# ! Note: For docking and undocking, the probe movement routines are tailored for the probe cradle affixed to the left
#   side, on the outboard left bed extrusion.
#
# This is done using the following macros:
#               - G3201
#               - _CHECK_PROBE1
#               - _CHECK_PROBE2
#               - _CHECK_PROBE3
#               - _CHECK_PROBE4
#               - _CHECK_PROBE5
#               - _CHECK_PROBE6
#
# There is also a "security mechanism" included to check the distance between Z-Endstop 0-Point and new probed 0-Point.
# If this distance is larger than the defined ZprobeAbortTolerance, the new Value will not be applied, and you will have to check
# your Probe / Nozzle or adapt your "variable_euclidZCompensation:"
#
#
# +++++++++++++++++++ Macros jointly maintained by @rkolbi(deepsiks) & @k2dp2k +++++++++++++++++++
#
# You need to disable the following sections in your existing printer.cfg
#
# [probe]
# [safe_z_home]
#
# Insert [include ./voron_retro_euclid.cfg] to your printer.cfg file
#
# Inside this config file you need to adapt the marked lines to your setup (<-----------)
#

#*********  Choose your Printer Size: ********* 


[gcode_macro euclidvars]
#------------------------------------------------- Needed Values -------------------------------------------------- 
variable_euclidX: 229                              # X Position directly over probe                                              <-----------
variable_euclidY: 0                                # Y Position directly over probe                                              <-----------
variable_euclidSwipeX: 180                         # X Position, swipe to the side to free probe of dock                         <-----------
variable_euclidSafeDeployZ: 40                     # Z Safe height for deployment approach                                       <-----------
variable_euclidSafeStowZ: 30                       # Z Safe height following stowing the probe (break mag pull)                  <-----------
variable_euclidDeployZ: 18                         # Lower to just above probe, no physical contact                              <-----------
variable_euclidStowZ: 12.2                         # Lower to exact postion for dock entry/exit                                  <-----------
variable_defaultWarmNozzle: 160                    # To get the biggest part of nozzle expansion compensated without oozing      <-----------

#------------------------------------------------ Z Compensation ------------------------------------------------- 
variable_euclidZCompensation: 6.6168               # Z0 Compensation based off probe height, finetune this using the             <-----------
                                                   # "Papertest and an additional First layer print"
variable_ZprobeSpeed: 3.0                          # Probing speed for Z Measurements                                            <-----------
variable_ProbeBoundingBox: 30                      # Bounding box size to take probe samples, this is used for X & Y.            <-----------
variable_ZprobeSamples: 5                          # Samples probed per Z Point as the point is calculated out of median         <-----------
                                                   # keep this number odd e.g. 3,5,7...
variable_ZprobeTolerance: 0.020                    # Sample Tolerance per Z Point <-----------
variable_ZprobeAbortTolerance: 1.0                 # Tolerance to apply the Measured Z-0 Point or throw an error to check things <-----------
variable_ZprobeRetract: 1.2                        # Retract from each probing for a D2F-5 Switch 1.2 should be good             <-----------
variable_DoApplyMesh: True                         # Apply mesh prior to probe sampling, for Z Compensation
variable_MeshToApply: "NONE"                       # The saved mesh to apply, mesh name must be enclosed with ""
                                                   # *!* To perform a fresh in-situation mesh calibration, instead of loading a saved
                                                   # mesh, use "INSITU" for MeshToApply. This will be applied before Z Comp probing.
                                                   # *!* To completely skip applying mesh, use "NONE" for MeshToApply
#------------------------------------------------ Added By Me ------------------------------------------------- 
variable_BedCenterX: 112                           # X Bed Center for post stow macro                                            <-----------
variable_BedCenterY: 112                           # Y Bed Center for post stow macro                                            <-----------

gcode:

#*********  Neccesary things.... ********* 
[force_move]
enable_force_move: true

[respond]
default_type: echo

[delayed_gcode prerun]
initial_duration: 1
gcode:
    QUERY_PROBE
    M117 Printer online.
    
#********* Euclid related macros ********* 
# M401 - Deploy Euclid Probe
[gcode_macro M401]
gcode:
    QUERY_PROBE
    {% if printer.probe.last_query %}
        M118 Fetching Euclid Probe.
        _PROBE_DEPLOY
    {% else %}
        M118 ?!Probe is already attached.
    {% endif %}

# M402 - Stow Euclid Probe
[gcode_macro M402]
gcode:
    QUERY_PROBE
    {% if not printer.probe.last_query %}
        M118 Stowing Euclid Probe.
        _PROBE_STOW
    {% else %}
        M118 ?!Probe is not attached.
    {% endif %}

#*********  Euclid Probe Safety Checks
[gcode_macro _do_error_if_probe_deployed]
gcode:
    {% if not printer.probe.last_query %}
        {action_raise_error("ERROR: probe still deployed - remove and return to dock.")}
    {% else %}
        M118 Euclid Probe has been stowed.  
    {% endif %}

#.................................................................................................................
[gcode_macro _error_if_probe_deployed]
gcode:
    G4 P300
    QUERY_PROBE
    _do_error_if_probe_deployed

#.................................................................................................................
[gcode_macro _do_error_if_probe_not_deployed]
gcode:
    {% if printer.probe.last_query %}
        {action_raise_error("ERROR: probe unsuccessfully deployed.")}
    {% else %}
        M118 Euclid Probe has been attached.
    {% endif %}

#.................................................................................................................
[gcode_macro _error_if_probe_not_deployed]
gcode:
    G4 P300
    QUERY_PROBE
    _do_error_if_probe_not_deployed

#.................................................................................................................
[gcode_macro _PROBE_DEPLOY]
gcode:
    G90
    G0 Z{printer["gcode_macro euclidvars"].eucliddeployz|float} F1000
    G0 X{printer["gcode_macro euclidvars"].euclidx|float} Y{printer["gcode_macro euclidvars"].euclidy|float} F5000
    SET_SERVO SERVO=euclid_servo ANGLE=0
    G4 P1000
    G0 Z{printer["gcode_macro euclidvars"].euclidstowz|float} F1000
    G0 X{printer["gcode_macro euclidvars"].euclidswipex|float} F5000
    G0 Z{printer["gcode_macro euclidvars"].eucliddeployz|float} F1000
    SET_SERVO SERVO=euclid_servo ANGLE=180
    G4 P1000
    _error_if_probe_not_deployed ; Verify probe attached

#.................................................................................................................
[gcode_macro _PROBE_STOW]
gcode:
    G90
    G0 X{printer["gcode_macro euclidvars"].bedcenterx|float} Y{printer["gcode_macro euclidvars"].bedcentery|float} F5000
    SET_SERVO SERVO=euclid_servo ANGLE=0
    G4 P100
    G0 Z{printer["gcode_macro euclidvars"].euclidstowz|float} F1000
    G0 X{printer["gcode_macro euclidvars"].bedcenterx|float} Y{printer["gcode_macro euclidvars"].bedcentery|float} F5000
    G0 X{printer["gcode_macro euclidvars"].euclidswipex|float} Y{printer["gcode_macro euclidvars"].euclidy|float} F5000
    G0 X{printer["gcode_macro euclidvars"].euclidx|float} F1000
    G0 Z{printer["gcode_macro euclidvars"].eucliddeployz|float} F800
    SET_SERVO SERVO=euclid_servo ANGLE=180
    G4 P100
    _error_if_probe_deployed ; Verify probe detached
    G0 X{printer["gcode_macro euclidvars"].bedcenterx|float} Y{printer["gcode_macro euclidvars"].bedcentery|float} F5000

#.................................................................................................................
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_ORIGINIAL
gcode:
    QUERY_PROBE
    M401
    BED_MESH_CALIBRATE_ORIGINIAL
    M402

#.................................................................................................................
[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    QUERY_PROBE
    {% if printer.probe.last_query %}
        M118 Fetching Euclid Probe.
        _PROBE_DEPLOY
    {% endif %}
    G28
    M118 Stowing Euclid Probe.
    _PROBE_STOW
    QUERY_PROBE


#********* Z Probing Macros ********* 
#.................................................................................................................
[gcode_macro G3201]  # This one should be used instead of the normal G32 / QGL in the Print_start macro
gcode:
    {% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
    {% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
    {% set defaultWN = printer["gcode_macro euclidvars"].defaultwarmnozzle|float %}
    {% set ZSpeed = printer["gcode_macro euclidvars"].zprobespeed|float %}
    {% set ZSamples = printer["gcode_macro euclidvars"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro euclidvars"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro euclidvars"].zproberetract|float %}
    {% set ZP_CAL = printer["gcode_macro euclidvars"].euclidzcompensation|float %}
    {% set MeshToApply = printer["gcode_macro euclidvars"].meshtoapply|default() %}
    BED_MESH_CLEAR
    M118 Probing Z is done using following Settings:
    M118 Speed: {ZSpeed} mm/s
    M118 Samples: {ZSamples}
    M118 Sample Tolerance: {ZTolerance} mm
    M118 Sample Retract: {ZRetract} mm
    M118 Your Current Z Compensation Value is: {ZP_CAL} mm
    M118 Heating up Nozzle to {defaultWN} C...
    M109 S{defaultWN}
    G4 P1000
    {% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}
    QUERY_PROBE
    M401
    G28 Z
    {% if MeshToApply == "INSITU" %}
        BED_MESH_CALIBRATE_ORIGINIAL SAMPLES=3
        BED_MESH_PROFILE SAVE=INSITUMESH
        BED_MESH_OUTPUT PGP=0
    {% else %}
        {% if printer["gcode_macro euclidvars"].doapplymesh|default() == true and MeshToApply != "NONE" %}
            BED_MESH_PROFILE LOAD={MeshToApply}
            M118 Applying {MeshToApply} mesh prior to sampling.
        {% else %}
            M118 Not applying a mesh prior to sampling.
        {% endif %}
    {% endif %}
    G90
    G0 X{X_MID} Y{Y_MID} F3500
    G91  
    PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries=3 sample_retract_dist={ZRetract}
    _CHECK_PROBE1

[gcode_macro _CHECK_PROBE1]
gcode:
    {% set PROBE_PASS = printer.probe.last_z_result|float %}
    {% set ZSpeed = printer["gcode_macro euclidvars"].zprobespeed|float %}
    {% set ZSamples = printer["gcode_macro euclidvars"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro euclidvars"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro euclidvars"].zproberetract|float %}
    {% set ProbeBB = printer["gcode_macro euclidvars"].probeboundingbox|float %}
    G0 Z2 F500
    G0 X-{(ProbeBB/2)} Y-{(ProbeBB/2)} F2500
    PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries=3 sample_retract_dist={ZRetract}
    _CHECK_PROBE2 PASS={PROBE_PASS}


[gcode_macro _CHECK_PROBE2]
gcode:
    {% set PASS = params.PASS|float %}
    {% set PROBE_PASS = printer.probe.last_z_result|float %}
    {% set ZSpeed = printer["gcode_macro euclidvars"].zprobespeed|float %}
    {% set ZSamples = printer["gcode_macro euclidvars"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro euclidvars"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro euclidvars"].zproberetract|float %}
    {% set ProbeBB = printer["gcode_macro euclidvars"].probeboundingbox|float %}
    G0 Z2 F500
    G0 X{ProbeBB} F2500
    PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries=3 sample_retract_dist={ZRetract}
    _CHECK_PROBE3 PASS={PROBE_PASS + PASS}

[gcode_macro _CHECK_PROBE3]
gcode:
    {% set PASS = params.PASS|float %}
    {% set PROBE_PASS = printer.probe.last_z_result|float %}
    {% set ZSpeed = printer["gcode_macro euclidvars"].zprobespeed|float %}
    {% set ZSamples = printer["gcode_macro euclidvars"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro euclidvars"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro euclidvars"].zproberetract|float %}
    {% set ProbeBB = printer["gcode_macro euclidvars"].probeboundingbox|float %}
    G0 Z2 F500
    G0 Y{ProbeBB} F2500
    PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries=3 sample_retract_dist={ZRetract}
    _CHECK_PROBE4 PASS={PROBE_PASS + PASS}


[gcode_macro _CHECK_PROBE4]
gcode:
    {% set PASS = params.PASS|float %}
    {% set PROBE_PASS = printer.probe.last_z_result|float %}
    {% set ZSpeed = printer["gcode_macro euclidvars"].zprobespeed|float %}
    {% set ZSamples = printer["gcode_macro euclidvars"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro euclidvars"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro euclidvars"].zproberetract|float %}
    {% set ProbeBB = printer["gcode_macro euclidvars"].probeboundingbox|float %}
    G0 Z2 F500
    G0 X-{ProbeBB} F2500
    PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries=3 sample_retract_dist={ZRetract}
    _CHECK_PROBE5 PASS={PROBE_PASS + PASS}

[gcode_macro _CHECK_PROBE5]
gcode:
    {% set PASS = params.PASS|float %}
    {% set PROBE_PASS = printer.probe.last_z_result %}
    {% set ZSpeed = printer["gcode_macro euclidvars"].zprobespeed|float %}
    {% set ZSamples = printer["gcode_macro euclidvars"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro euclidvars"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro euclidvars"].zproberetract|float %}
    G90
    G0 Z25 F3500
    _CHECK_PROBE6 PASS={(PROBE_PASS + PASS)/5}

[gcode_macro _CHECK_PROBE6]
gcode:
    {% set ZP_CAL = printer["gcode_macro euclidvars"].euclidzcompensation|float %}
    {% set ZAbortTolerance = printer["gcode_macro euclidvars"].zprobeaborttolerance|float %}
    {% set MeshToApply = printer["gcode_macro euclidvars"].meshtoapply|default() %}
    {% set DoApplyMesh = printer["gcode_macro euclidvars"].doapplymesh|int %}
    {% set PASS = params.PASS|float %}
    {% set Z_POS = printer.toolhead.position.z|float %}
    {% set Z_OFFSET = PASS - ZP_CAL|float %}
    {% set NEW_CURRENT_Z = (Z_POS - Z_OFFSET) %}
    M118 Current Average is: {PASS}
    M118 Z-Probe calibration is: {ZP_CAL}
    M118 Offset: {Z_OFFSET}
    {% if Z_OFFSET|abs > ZAbortTolerance %}
        M118 ! ! !  Z-OFFSET is > {ZAbortTolerance}mm, check nozzle cleanliness and printer  ! ! !
        M118 Not applying calculated offset to Z.
      {% else %}
    M118 Setting current Z_Height of {Z_POS} to {NEW_CURRENT_Z}
    SET_KINEMATIC_POSITION Z={NEW_CURRENT_Z}
    G4 P1000
    M118 Moving nozzle to newly adjusted Z25.
    G0 Z25 F3500
    G4 P1000
      {% endif %}
    QUERY_PROBE
    {% if not printer.probe.last_query %}
        M118 Stowing Euclid Probe.
        _PROBE_STOW
    {% else %}
        M118 ?!Probe is not attached.
    {% endif %}
    {% if printer["gcode_macro euclidvars"].doapplymesh|default() == false and MeshToApply != "INSITU" and MeshToApply != "NONE" %}
        BED_MESH_PROFILE LOAD={MeshToApply}
        M118 Applied {MeshToApply} mesh post sampling.
    {% endif %}
    PARKCENTER                        
    M118 :-) Ready to Print :-)
    
     
#-------------------------------- Optional Changes ------------------------------------------------
# You also need to adapt your PRINT_START Macro, see marced Lines
#[gcode_macro PRINT_START]
#gcode: 
#    {% set bedtemp = params.BED|int %}
#    {% set hotendtemp = params.HOTEND|int %}
#    {% set chambertemp = params.CHAMBER|default(0)|int %}
#    {% set defaultWN = printer["gcode_macro euclidvars"].defaultwarmnozzle|int %}                              <-----------
#    BED_MESH_CLEAR
#    SET_GCODE_OFFSET Z=0.0
#    G28
#    PARKCENTER                        
#    M104 S{defaultWN}                                                                                          <-----------
#    M190 S{bedtemp}                                                       
#    TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber" MINIMUM={chambertemp}   
#    G3201                                                                                                      <-----------
#    PARKCENTER
#    M109 S{hotendtemp} 
#    G1 X55 Y2 Z0.85 F12000;
#    G1 X85 Y2 E20 F100;
#    G1 X90 F18000;